// Generated by Xata Codegen 0.30.0. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  { name: "conversation", columns: [] },
  { name: "messages", columns: [] },
  { name: "notes", columns: [] },
  { name: "tests", columns: [{ name: "text", type: "string" }] },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Conversation = InferredTypes["conversation"];
export type ConversationRecord = Conversation & XataRecord;

export type Messages = InferredTypes["messages"];
export type MessagesRecord = Messages & XataRecord;

export type Notes = InferredTypes["notes"];
export type NotesRecord = Notes & XataRecord;

export type Tests = InferredTypes["tests"];
export type TestsRecord = Tests & XataRecord;

export type DatabaseSchema = {
  conversation: ConversationRecord;
  messages: MessagesRecord;
  notes: NotesRecord;
  tests: TestsRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://Vincent-Carrancho-s-workspace-kj5dq0.us-east-1.xata.sh/db/stars-gpt-2",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
